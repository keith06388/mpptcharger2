/*
  Noto_Sans_Regular_32
  Datacute Proportional Font
  10 characters: 0x30 48 0 to 0x39 57 9
  Width: typically 19 pixels wide including 5 pixel spacing between characters
  Height: 23 pixels, 3 pages (bottom 1 rows are always blank)
  Total bytes: 142 * 3 + 10 + 1 * 2 + 11 = 449

  Converted by Datacute Font Converter
  Source Information:
    Font Family: Noto Sans
    Typeface: Regular
    Manufacturer: Monotype Imaging Inc.
    Description: Designed by Monotype design team
    Version: Version 1.04
    Vendor URL: http://code.google.com/p/noto/
    Trademark: Noto is a trademark of Google Inc. and may be registered in certain jurisdictions.
    Copyright: Copyright 2012 Google Inc. All Rights Reserved.
    Licence: Licensed under the Apache License, Version 2.0


  To use:

#include "Noto_Sans_Regular_32_0030_0039_19x23.h"
const DCfont *currentFont = FONTNOTO_SANS_REGULAR_32_0030_0039;

However, this font was created as a portion of a unicode font, see Noto_Sans_Regular_32_Unicode.h
*/

#include <avr/pgmspace.h>
const uint8_t ssd1306xled_fontspleen [] PROGMEM = {
 // char .
  0x00, 
  0x00, 
  0x00, 
  0x00, 
  0x00, 
  0x00, 
  0x0e, 
  0x0e, 
  0x00,  // char /
  0xff, 0xff, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xff, 0xff, 
  0x00, 0xff, 
  0xff, 0x00, 
  0x80, 0xc0, 
  0xe0, 0xe0, 
  0xc0, 0x80, 
  0x00, 0xff, 
  0xff, 0x00, 
  0x0f, 0x0f, 
  0x07, 0x03, 
  0x01, 0x00, 
  0x00, 0x01, 
  0x03, 0x07, 
  0x0f, 0x0f, 
  0x00,  // char 0
  0xfc, 0xfe, 
  0x07, 0x03, 
  0x03, 0x03, 
  0x03, 0x83, 
  0xc3, 0xe7, 
  0xfe, 0xfc, 
  0x00, 0xff, 
  0xff, 0x70, 
  0x38, 0x1c, 
  0x0e, 0x07, 
  0x03, 0x01, 
  0x00, 0xff, 
  0xff, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00,
  // char 1
  0x00, 0x00, 
  0x18, 0x0c, 
  0x06, 0x03, 
  0xff, 0xff, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0xff, 
  0xff, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0f, 0x0f, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x00,  // char 2
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x87, 
  0xfe, 0x7c, 
  0x00, 0x00, 
  0x80, 0xc0, 
  0x60, 0x30, 
  0x18, 0x0c, 
  0x06, 0x03, 
  0x01, 0x00, 
  0x00, 0x00, 
  0x0f, 0x0f, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0f, 0x0f, 
  0x00,  // char 3
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x87, 
  0xfe, 0x7c, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x07, 0xfc, 
  0xf8, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00,  // char 4
  0xff, 0xff, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xf0, 0xf0, 
  0x00, 0x00, 
  0x00, 0x3f, 
  0x3f, 0x30, 
  0x30, 0x30, 
  0x30, 0x30, 
  0x30, 0xff, 
  0xff, 0x30, 
  0x30, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x0f, 0x0f, 
  0x00, 0x00, 
  0x00,  // char 5
  0xff, 0xff, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x0f, 0x0f, 
  0x00, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x07, 0xfe, 
  0xfc, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00,  // char 6
  0xfc, 0xfe, 
  0x07, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x00, 0xff, 
  0xff, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x07, 0xfe, 
  0xfc, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00,  // char 7
  0x0f, 0x0f, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x83, 
  0xff, 0x7f, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0xf0, 
  0xf8, 0x0c, 
  0x06, 0x03, 
  0x01, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x0f, 0x0f, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00,  // char 8
  0x7c, 0xfe, 
  0x87, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x87, 
  0xfe, 0x7c, 
  0x00, 0xf8, 
  0xfc, 0x07, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x07, 0xfc, 
  0xf8, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00,  // char 9
  0xfc, 0xfe, 
  0x07, 0x03, 
  0x03, 0x03, 
  0x03, 0x03, 
  0x03, 0x07, 
  0xfe, 0xfc, 
  0x00, 0x03, 
  0x07, 0x0e, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0xff, 
  0xff, 0x00, 
  0x03, 0x07, 
  0x0e, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0c, 
  0x0c, 0x0e, 
  0x07, 0x03, 
  0x00
};
const uint8_t TinyOLEDFontspleen_widths [] PROGMEM = {
  3,13,13,13,13,13,13,13,13,13,13,13
  };

const uint16_t TinyOLEDFontspleen_widths_16s [] PROGMEM = {
  3+13+13+13+13+13+13+13+13+13+13+13
  };
const DCfont TinyOLEDFontspleen = {
  (uint8_t *)ssd1306xled_fontspleen,
  0, // character width in pixels 0 for proportional fonts
  3, // character height in pages (8 pixels)
  46,57, // first and last low byte defining range of included character codepoints
  (uint16_t *)TinyOLEDFontspleen_widths_16s,
  (uint8_t *)TinyOLEDFontspleen_widths,
  0 // spacing
  };
#define FONTspleen (&TinyOLEDFontspleen)
